// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    // Instruction
    // 0    Jump if out > 0
    // 1    Jump if out == 0
    // 2    Jump if out < 0
    // 3    Write to M (memory)
    // 4    Write to D register
    // 5    Write to A register
    // 6    ALU6 (negate ALU out)
    // 7    ALU5 (plus or and)
    // 8    ALU4 (negate y)
    // 9    ALU3 (zero y)
    // 10   ALU2 (negate x)
    // 11   ALU1 (zero x)
    // 12   Input A if 0 else M
    // 13   unused
    // 14   unused
    // 15   C instruction if 1 else A instruction

    // Decide whether to write to A Register
    // Write if (A instruction) or (C instruction and 'Write to A' bit)    
    And (a=instruction[15], b=instruction[5], out=writeToAwC);
    Not (in=instruction[15], out=writeToAwA);
    Or (a=writeToAwC, b=writeToAwA, out=writeToA);

    // Select A register input
    Mux16 (a=instruction, b=ALUOut, sel=writeToAwC, out=ARegIn);

    // A Register
    ARegister (
        in=ARegIn, load=writeToA,
        out=ARegOut,
        out[0..14]=addressM
    );

    // D register is sent to ALU 'X' channel
    And (a=instruction[15], b=instruction[4], out=writeToD);
    DRegister (in=ALUOut, load=writeToD, out=XChannelIn);

    // Decide on 'Y' input to ALU
    Mux16 (a=ARegOut, b=inM, sel=instruction[12], out=YChannelIn);

    ALU
    (
        x=XChannelIn,
        y=YChannelIn,
        zx=instruction[11],     // zero the x input
        nx=instruction[10],     // negate the x input
        zy=instruction[9],      // zero the y input
        ny=instruction[8],      // negate the y input
        f=instruction[7],       // compute out = x + y (if 1) or x & y (if 0)
        no=instruction[6],      // negate the out output

        out=ALUOut,
        out=outM,
        zr=OutEQ,               // 1 if (out == 0), 0 otherwise
        ng=OutLT                // 1 if (out < 0),  0 otherwise
    );

    // Set writeM
    And (a=instruction[3], b=instruction[15],out=writeM);

    // Calculate jump based on OutEQ and OutLT
    // and the 'last' 3 instruction bits
    Or (a=OutEQ, b=OutLT, out=OutLE);
    Not (in=OutLE, out=OutGT);
    And (a=instruction[2], b=OutLT, out=jump1);
    And (a=instruction[1], b=OutEQ, out=jump2);
    And (a=instruction[0], b=OutGT, out=jump3);
    Or (a=jump1, b=jump2, out=jump1or2);
    Or (a=jump1or2, b=jump3, out=jumpIfCInstruction);
    And (a=instruction[15], b=jumpIfCInstruction, out=jump);

    PC
    (
        in=ARegOut, 
        load=jump, 
        inc=true, 
        reset=reset, 
        out[0..14]=pc
    );
}