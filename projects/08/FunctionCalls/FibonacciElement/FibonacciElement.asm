// Boostrap the Hack Virtual Machine
@256
D=A
@SP
M=D
// call Sys.init 0
@RETURN_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@Sys.init
0;JMP
(RETURN_0)
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
@SP
A=M

// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// lt
@SP
M=M-1
D=M
@R13
M=D-1
A=D
D=M
@R13
A=M
D=M-D
@TRUE_0
D;JLT
@0
D=A
@FALSE_0
0;JMP
(TRUE_0)
@1
D=-A
(FALSE_0)
@SP
A=M-1
M=D

// if-goto Main.fibonacci.IF_TRUE
@SP
M=M-1
A=M
D=M
@Main.fibonacci.IF_TRUE
D;JNE

// goto Main.fibonacci.IF_FALSE
@Main.fibonacci.IF_FALSE
0;JMP

// label Main.fibonacci.IF_TRUE
(Main.fibonacci.IF_TRUE)

// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A
@SP
M=D+1
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP

// label Main.fibonacci.IF_FALSE
(Main.fibonacci.IF_FALSE)

// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
M=M-1
D=M
@R13
M=D-1
A=D
D=M
@R13
A=M
M=M-D

// call Main.fibonacci 1
@RETURN_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@Main.fibonacci
0;JMP
(RETURN_1)

// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
M=M-1
D=M
@R13
M=D-1
A=D
D=M
@R13
A=M
M=M-D

// call Main.fibonacci 1
@RETURN_2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@Main.fibonacci
0;JMP
(RETURN_2)

// add
@SP
M=M-1
D=M
@R13
M=D-1
A=D
D=M
@R13
A=M
M=D+M

// return
@LCL
D=M
@FRAME
M=D
@FRAME
D=M
@5
D=D-A
A=D
D=M
@RET
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A
@SP
M=D+1
@FRAME
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@FRAME
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@FRAME
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@FRAME
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@RET
A=M
0;JMP
// function Sys.init 0
(Sys.init)
@0
D=A
@SP
A=M

// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

// call Main.fibonacci 1
@RETURN_3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@LCL
M=D
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@Main.fibonacci
0;JMP
(RETURN_3)

// label Sys.init.WHILE
(Sys.init.WHILE)

// goto Sys.init.WHILE
@Sys.init.WHILE
0;JMP
